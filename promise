promise:
-> A promise is a special javascript object that  represents the eventual comptetion (or failure) asynchronous operation
->it allows to handle asynchronous tasks  more than callbacks

Three states:
1)pending:The itial state ,the promise is still waiting for the operation to finish
2)fulfilled:The operation completed successfully
3)Rejected:The peration failed;

exp:
1)to create a promise - new promise()
Two parameters-
resolve-to mark the promise as successfully
reject-mark it as failed

2)handling the result;
.then() method is called when promise is fulfilled
It will resolve the result from resolve()
.catch() method is called if the promise is rejected
it receives the error message from reject()

example:
//        let mypromise = new Promise((resolve, reject) => {
//     let success = true;
//     if(success){
//         resolve("The operation is successful");
//     }else{
//         reject("The operation failed");
//     }
// });
// mypromise
// .then((result) => {
//     console.log(result); // Corrected capitalization
// })
// .catch((error) => {
//     console.log(error);
// });
output:
The operation is successful

example:
// let promise = new Promise((resolve,reject)=>{
//         resolve(5);
//     })
//     promise
//     .then(result=>{
//         console.log(result);
//         return result*2
//     })
//     .then(result=>{
//         console.log(result);
//         return result+3
//     })
//     .then(result=>{
//         console.log(result);
//     })
//     .catch(error=>{
//         console.lpg("error",error)
//     })
 output:
5
10
13

example:
Promise with setTimeout
-asynchronous task using setTimeOut an the promise will resolve after a certain amount of time

let myPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        let success = true;          
        if (success) {
            resolve("Operation successful after delay!");
        } else {
            reject("Operation failed after delay.");
        }
    }, 2000); 
});

myPromise
    .then((result) => {
        console.log(result); 
    })
    .catch((error) => {
        console.log(error);  
    });

output:
Operation successful after delay
